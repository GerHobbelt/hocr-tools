#!/usr/bin/env python
#
# Copyright 2013 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Create a searchable PDF from a pile of HOCR + JPEG. Tested with
# Tesseract.

from __future__ import print_function
import argparse
import base64
import glob
import io
import os.path
import re
import sys
import zlib
import imghdr

from bidi.algorithm import get_display
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfgen.canvas import Canvas
from bidi.algorithm import get_display

from lxml import etree, html
from PIL import Image

class StdoutWrapper:
    """
    Wrapper around stdout that ensures 'bytes' data is decoded
    to 'latin1' (0x00 - 0xff) before writing out. This is necessary for
    the invisible font to be injected as bytes but written out as a string.
    """

    def write(self, data, *args, **kwargs):
        if bytes != str and isinstance(data, bytes):
            data = data.decode('latin1')
        sys.stdout.write(data)


def export_pdf(playground, default_dpi, savefile=False):
    """Create a searchable PDF from a pile of HOCR + JPEG"""
    images = sorted(glob.glob(playground))
    if len(images) == 0:
        print("WARNING: File not found ", playground,
              "\nScript cannot proceed without them and will terminate now.\n")
        sys.exit(0)
    load_invisible_font()
    pdf = Canvas(savefile if savefile else StdoutWrapper(), pageCompression=1)
    pdf.setCreator('Raven Cloud')
    pdf.setTitle(os.path.basename(playground))
    for image in images:
        im = Image.open(image)
        w, h = im.size
        dpi = get_file_dpi(im)
        width = w * 72 / dpi
        height = h * 72 / dpi
        pdf.setPageSize((width, height))
        pdf.drawImage(image, 0, 0, width=width, height=height)
        add_text_layer(pdf, image, height, dpi)
        pdf.showPage()
    pdf.save()

def get_file_dpi(image):
    try:
        dpi = image.info['dpi'][0]
    except KeyError:
        dpi = 1

    # a dpi lower than 50, we can assume is an error
    if dpi < 50:
        dpi = guess_file_dpi(image)

    return dpi

def guess_file_dpi(image):
    w, h = image.size
    width = min(w, h)
    dpi = width / 8.5
    real_dpi = dpi

    # Round to nearest expected value
    if dpi < 250:
        dpi = 200
    elif dpi < 350:
        dpi = 300
    elif dpi < 425:
        dpi = 400
    elif dpi < 500:
        dpi = 450
    else:
        dpi = 600

    print(real_dpi, dpi, file=sys.stderr)

    return dpi

def add_text_layer(pdf, image, height, dpi):
    """Draw an invisible text layer for OCR data"""
    p1 = re.compile(r'bbox((\s+\d+){4})')
    p2 = re.compile(r'baseline((\s+[\d\.\-]+){2})')
    hocrfile = os.path.splitext(image)[0] + ".hocr"
    hocr = etree.parse(hocrfile, html.XHTMLParser())
    for line in hocr.xpath('//*[@class="ocr_line"]'):
        linebox = p1.search(line.attrib['title']).group(1).split()
        try:
            baseline = p2.search(line.attrib['title']).group(1).split()
        except AttributeError:
            baseline = [0, 0]
        linebox = [float(i) for i in linebox]
        baseline = [float(i) for i in baseline]
        xpath_elements = './/*[@class="ocrx_word"]'
        if (not (line.xpath('boolean(' + xpath_elements + ')'))):
            # if there are no words elements present,
            # we switch to lines as elements
            xpath_elements = '.'
        for word in line.xpath(xpath_elements):
            rawtext = word.text_content().strip()
            if rawtext == '':
                continue
            font_width = pdf.stringWidth(rawtext, 'karla', 8)
            if font_width <= 0:
                continue
            box = p1.search(word.attrib['title']).group(1).split()
            box = [float(i) for i in box]
            b = polyval(baseline,
                        (box[0] + box[2]) / 2 - linebox[0]) + linebox[3]
            text = pdf.beginText()
            text.setTextRenderMode(3)  # double invisible
            text.setFont('karla', 8)
            text.setTextOrigin(box[0] * 72 / dpi, height - b * 72 / dpi)
            box_width = (box[2] - box[0]) * 72 / dpi
            text.setHorizScale(100.0 * box_width / font_width)
            rawtext = get_display(rawtext)
            text.textLine(rawtext)
            pdf.drawText(text)


def polyval(poly, x):
    return x * poly[0] + poly[1]


# Glyphless variation of vedaal's invisible font retrieved from
# http://www.angelfire.com/pr/pgpf/if.html, which says:
# 'Invisible font' is unrestricted freeware. Enjoy, Improve, Distribute freely
def load_invisible_font():
    font = """

""".encode('utf-8')
    uncompressed = bytearray(base64.b64decode(font))
    ttf = io.BytesIO(uncompressed)
    setattr(ttf, "name", "(karla.ttf)")

    pdfmetrics.registerFont(TTFont('karla', ttf))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Create a searchable PDF from a pile of hOCR and JPEG/TIFF")
    parser.add_argument(
        "img",
        help=("The image to be converted JPG, JPEG or TIFF")
    )
    parser.add_argument(
        "--savefile",
        help="Save to this file instead of outputting to stdout"
    )
    args = parser.parse_args()
    if not args.img.lower().endswith(('.tiff', '.jpg', '.jpeg')):
        sys.exit("ERROR: Invalid image type")
    export_pdf(args.img, 300, args.savefile)
